"""
This scripts filters current professors from dblp_map.json using a list of professors and a custom map table (input/manual_map.csv).
"""

import argparse
import json
from collections import defaultdict
from pathlib import Path

import pandas as pd


def main():
    parser = argparse.ArgumentParser(
        prog='filter_current_professors',
        description='Filter current professors from dblp')
    parser.add_argument(
        '-d', '--dblp-map', default="output/dblp_map.json",
        help="Full DBLP map. Generated by 1.create_dblp_pid_map.py")
    parser.add_argument(
        '-i', '--inputs', nargs="*", default=["input/current.txt"],
        help="List of professors as txt files.")
    parser.add_argument(
        '-m', '--manual', default="input/manual_map.csv",
        help="Table with manual map of professors to load DBLP pids that cannot be inferred by name")
    parser.add_argument(
        '-o', '--output', default="output/professor_map.json",
        help="Output json file")
    parser.add_argument(
        '--no', action='store_true', help='Do not load manual map')
    parser.add_argument(
        '--read-manual-map', action='store_true', 
        help='Force load of manual map and skip first prompt')
    parser.add_argument(
        '--skip-prompt', action='store_true',
        help='Skip firts prompt and loads manual map when its is missing')
    parser.add_argument(
        '--force-load', action='store_true',
        help='Load manual map even when there are no missing professors. Useful for adding more pids for found professors')
    
    args = parser.parse_args()

    Path(args.output).parent.mkdir(parents=True, exist_ok=True)

    with open(args.dblp_map, "r") as f:
        pid_map = json.load(f)

    professors = set()
    for input_file in args.inputs:
        with open(input_file, "r") as f:
            professors |= set(map(str.strip, f.readlines()))

    professor_map = defaultdict(list)
    for pid, author in pid_map.items():
        for name in author.get('author', []):
            if name in professors:
                professor_map[name].append(author)


    skip_prompt = args.skip_prompt
    force_load = args.force_load
    if args.read_manual_map:
        skip_prompt = force_load = True
    load_manual = args.manual
    missing = professors - set(professor_map)
    while (missing and not args.no) or force_load:
        if not skip_prompt:
            print(f"{len(missing)} professor not found:")
            for professor in missing:
                print(f"- {professor}")
            answer = input(f"Do you want to load map from '{load_manual}? [Y,n,other]").strip()
        else:
            answer = 'y'
        skip_prompt = False
        if answer and answer.lower()[0] == 'n':
            break
        if answer and answer.lower()[0] == 'o':
            new_file = input(f"Which file do you want to load? Leave it in blank to go back").strip()
            if new_file:
                load_manual = new_file
                answer = 'y'
        if not answer or answer.lower()[0] in ('y', 's'):
            df = pd.read_csv(load_manual)
            for i, row in df.iterrows():
                if row["professor"] in missing:
                    professor_map[row["professor"]].append(pid_map[row["pid"]])
            missing = professors - set(professor_map)
            force_load = False

    if missing:
        print(f"WARNING: creating map without {len(missing)} professors:")
        for professor in missing:
            print(f"- {professor}")

    with open(args.output, "w") as f:
        json.dump(professor_map, f, indent=2)

    
if __name__ == "__main__":
    main()
    